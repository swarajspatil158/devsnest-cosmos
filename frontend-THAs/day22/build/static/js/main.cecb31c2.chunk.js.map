{"version":3,"sources":["Meme.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Meme","template","onClick","style","width","src","url","alt","name","id","App","useState","templates","setTemplates","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","useEffect","fetch","then","x","json","response","data","memes","textAlign","onSubmit","e","a","preventDefault","params","template_id","text0","text1","username","password","obj","Object","entries","map","key","value","join","placeholder","onChange","target","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cecb31c2.chunk.js","sourcesContent":["\nimport React from \"react\";\n\nexport const Meme = ({ template, onClick }) => {\n  return (\n    <img\n      style={{ width: 200 }}\n      key={template.id}\n      src={template.url}\n      alt={template.name}\n      onClick={onClick}\n    />\n  );\n};","import React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./Meme\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x =>\n      x.json().then(response => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {template && (\n        <form\n          onSubmit={async e => {\n            e.preventDefault();\n            // add logic to create meme from api\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: \"xzk03017\",\n              password: \"xzk03017@cndps.com\"\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const json = await response.json();\n            setMeme(json.data.url);\n          }}\n        >\n          <Meme template={template} />\n          <input\n            placeholder=\"top text\"\n            value={topText}\n            onChange={e => setTopText(e.target.value)}\n          />\n          <input\n            placeholder=\"bottom text\"\n            value={bottomText}\n            onChange={e => setBottomText(e.target.value)}\n          />\n          <button type=\"submit\">create meme</button>\n        </form>\n      )}\n      {!template && (\n        <>\n          <h1>Pick a template</h1>\n          {templates.map(template => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}